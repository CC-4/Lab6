#!/usr/bin/python3

import os
import sys
import gzip
import pickle
from autograder import cprint
from autograder import colored


# max score
SCORE = 63


# creates grading and grading/test-output directories
def start():
    os.system('clear')
    os.system('rm -rf ' + os.path.join('grading'))
    os.system('rm -rf ' + os.path.join('grading', 'test-output'))
    os.system('mkdir ' + os.path.join('grading'))
    os.system('mkdir ' + os.path.join('grading', 'test-output'))


# creates an output file
def create(name, data):
    if not os.path.exists(os.path.join('grading', name)):
        f = open(os.path.join('grading', name), 'w')
        f.write(data)
        f.close()


# executes a test
def execute(name, part, ext):
    test = os.path.join('grading', name + ext)
    os.system('./run -' + part + ' ' + test + ' > grading/.tmp 2>&1')
    testout = open('grading/.tmp', 'r')
    testresult = testout.read().strip()
    testout.close()
    return testresult


# copy result
def copy(name, data, ext):
    f = open('grading/test-output/' + name + ext + '.out', 'w')
    f.write(data)
    f.close()


# calls diff
def diff(name, ext):
    cmd = 'diff grading/%s%s.out grading/test-output/%s%s.out' % (name, ext, name, ext)
    cmd += ' > grading/test-output/%s.diff' % name
    os.system(cmd)


# clear temp files
def clear():
    os.system('rm -rf grading/.tmp')
    os.system('rm -rf grading/.tmp.s')


# main script
def main(part):
    f = gzip.open(os.path.join('autograder', 'data.pkl.gz'), 'rb')
    data = pickle.load(f)
    f.close()
    start()
    print('')
    cprint('      Autograder', color='blue')
    print('')
    print('')
    os.system('./gradlew clean build > /dev/null 2>&1')
    grade = 0
    total = 12 if part == 'viper' else 6
    ext = '.vp' if part == 'viper' else '.g'
    for sample in data[part]:
        # unpack test data
        input, output, name = sample
        # create test input
        create(name + ext, input)
        # create test expected result
        create(name + ext + '.out', output)
        # run test
        uresult = execute(name, part, ext)
        # compare
        if uresult != output:
            copy(name, uresult, ext)
            diff(name, ext)
            info = colored('-%d' % 1, 'red')
            info += colored('(%s)' % name, 'cyan').center(30, ' ')
            print(info)
        else:
            grade += 1
            info = colored('+%d' % 1, 'green')
            info += colored('(%s)' % name, 'cyan').center(30, ' ')
            print(info)
        # clear output
        clear()
    print('\n')
    cprint('=> You got a score of %d out of %d.' % (grade, total), color='yellow')
    # save score
    f = open('grading/SCORE', 'w')
    f.write('%d' % grade)
    f.close()


if __name__ == '__main__':
    if (len(sys.argv) == 2):
        part = sys.argv[1].lower()
        if part in ['cycles', 'viper']:
            main(part)
